# For full config options, check the docs:
#    docs.serverless.com

service: why82-calc

plugins:
  - python-deps
  - serverless-plugin-write-env-vars
  - env-create

custom:
  writeEnvVars:
    BUCKET_NAME: ${self:service}-${opt:stage, self:provider.stage}
    STATS_BUCKET_NAME: why82-stats-${opt:stage, self:provider.stage}
    CURRENT_SEASON: 2017

provider:
  name: aws
  runtime: python2.7
  region: us-west-2
  stage: dev
  iamRoleStatements:
    - Effect: Allow
      Action:
        - s3:GetObject
      Resource:
        - Fn::Join:
          - ''
          - - 'arn:aws:s3:::'
            - Ref: DataBucket
            - /*
        - Fn::Join:
          - ':::'
          - - arn:aws:s3
            - why82-stats-${opt:stage, self:provider.stage}/*
    - Effect: Allow
      Action:
        - s3:PutObject
        - s3:PutObjectAcl
      Resource:
        - Fn::Join:
          - ''
          - - 'arn:aws:s3:::'
            - Ref: DataBucket
            - /*

package:
  exclude:
    - tests
    - out
    - .idea
    - .vagrant
    - why82.tar.gz
    - invoke.yaml
    - README.md
    - LICENSE
    - deps_package.sh
    - deps_pull.sh
    - deps_setup.sh
    - Vagrantfile
    - .DS_Store
    - node_modules
    - package.json
    - .coverage
    - why82.lambda.iml
    - __pycache__
    - python-deps

functions:
  tiers:
    handler: calc_tiers.lambda_handler
    timeout: 30
  schedule:
    handler: calc_schedule.lambda_handler
    timeout: 300

resources:
  Resources:
    DataBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:service}-${opt:stage, self:provider.stage}
        AccessControl: PublicRead
        CorsConfiguration:
          CorsRules:
            - MaxAge: 3600
              AllowedOrigins:
                - http://*.why82.com
                - https://*.why82.com
              AllowedMethods:
                - GET
                - HEAD
        NotificationConfiguration:
          LambdaConfigurations:
            - Event: s3:ObjectCreated:*
              Function:
                'Fn::GetAtt':
                  - ScheduleLambdaFunction
                  - Arn
              Filter:
                S3Key:
                  Rules:
                    - Name: suffix
                      Value: '-tiers.json'
    ScheduleLambdaPermissionS3:
      Type: AWS::Lambda::Permission
      Properties:
        FunctionName:
          'Fn::GetAtt':
            - ScheduleLambdaFunction
            - Arn
        Action: lambda:InvokeFunction
        Principal: s3.amazonaws.com
    TiersLambdaPermissionS3:
      Type: AWS::Lambda::Permission
      Properties:
        FunctionName:
          'Fn::GetAtt':
            - TiersLambdaFunction
            - Arn
        Action: lambda:InvokeFunction
        Principal: s3.amazonaws.com

  Outputs:
     DataBucket:
       Description: 'The bucket where stats will be stored'
       Value:
         Ref: DataBucket
